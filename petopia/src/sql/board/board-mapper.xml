<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
<comment>게시판 관련 SQL문</comment>

<!-- 삭제되지 않은 총 게시글 수 보여주는 SQL -->
<entry key="selectListCount">
		SELECT
		      			COUNT(*)
		  FROM
		       			TB_BOARD
		 WHERE
		       			BOARD_STATUS = 'Y'
		
</entry>



<!-- 메인보드에서 게시글을 한페이지에 boardLimit만큼 보여주는  SQL -->
<entry key="selectList">
		<!-- rownum과 페이징처리 공부하기 -->						
		SELECT *
				  FROM (SELECT ROWNUM RNUM, A.*
				          			FROM 
				          						(SELECT 
										                       BOARD_NO,
																BOARD_TITLE,
																BOARD_VIEWS,
																BOARD_CREATE_DATE,
																USER_NO,
																CTG_NO,
																PET_CTG_NO
																<!--FILE_PATH||'/'||UPLOAD_NAME FILE_IMG  -->
								                 FROM 
																TB_BOARD 
								                  JOIN
								                       			TB_CATEGORY USING(CTG_NO)
								                  JOIN 
								                       			TB_USER USING(USER_NO)
								                  JOIN
								                  				TB_FILE 
								                  						ON(BOARD_NO = REF_BNO)
								             	WHERE 
																BOARD_STATUS = 'Y'	
													AND <!-- 게시판 번호로 조회할 리스트 범위 한정 -->
																CTG_NO BETWEEN 1 AND 10
								                 ORDER
								                    BY BOARD_CREATE_DATE DESC)   A)
				         WHERE 
				         				RNUM BETWEEN ? AND ?
		         

</entry>

<!-- 게시글 조회에 앞서 조회수카운팅이 선행되어야하므로 만들어진 SQL -->
<entry key="increaseViewCount">
	 	UPDATE
	 					TB_BOARD
	 		SET
	 					BOARD_VIEWS = BOARD_VIEWS + 1
	 	WHERE
	 					BOARD_NO = ?
	 		AND
	 					BOARD_STATUS = 'Y'

</entry>

<entry key="selectFile">
	<!--  	SELECT
		               FILE_NO,
		               REF_BNO,
		               ORIGINAL_NAME,
		               UPLOAD_NAME,
		               FILE_PATH,
		               FILE_LEVEL
		  FROM
		                TB_FILE
		   JOIN
		                TB_BOARD
		                        USING(FILE_NO)
		 WHERE
		                BOARD_STATUS = 'Y'
		    AND
		                BOARD_NO = ?-->
		                
		SELECT
		       FILE_NO,
		       REF_BNO,
		       ORIGINAL_NAME,
		       UPLOAD_NAME,
		       FILE_PATH,
		       FILE_LEVEL
		  FROM
		       TB_FILE A
		  JOIN
		       TB_BOARD B ON(B.BOARD_NO = A.REF_BNO)
		 WHERE
		       FILE_LEVEL = 1 <!-- 썸네일용 -->
		   AND
		       BOARD_STATUS = 'Y'
		   AND 
		   		BOARD_NO = ?
		 ORDER
		    BY
		       REF_BNO DESC
</entry>


<entry key="selectLikeCount">
		SELECT
		                COUNT(*)
		  FROM
		                TB_BOARD
		   JOIN
		                TB_LIKE
		                        USING(BOARD_NO)
		 WHERE
		                BOARD_STATUS = 'Y'
		    AND
		    			LIKE_YN = 'Y'
		    AND
		                BOARD_NO = ?
</entry>

<entry key="selectCategory">
		SELECT
		               	CTG_NO,
		               	CTG_NAME
		  FROM
		                TB_CATEGORY
		   JOIN
		                TB_BOARD
		                        USING(CTG_NO)
		 <!-- BOARD랑 조인했는데 WHERE에서 쓸 수 있음 <- 1.FROM, 2.WEHRE이니까 -->                       
		 WHERE
		                BOARD_STATUS = 'Y'
		    AND
		                BOARD_NO = ?
</entry>

<entry key="selectBoard">
		SELECT
		               	BOARD_NO,
		               	BOARD_TITLE,
		               	BOARD_CONTENT,
		               	BOARD_CREATE_DATE,
		               	USER_NO,
		               	CTG_NO
		               	<!--FILE_PATH || '/' || UPLOAD_NAME "FILE_IMG"  -->
		  FROM
		                TB_BOARD A
		   JOIN
		                TB_FILE B ON(A.BOARD_NO = B.REF_BNO)
		 <!-- BOARD랑 조인했는데 WHERE에서 쓸 수 있음 <- 1.FROM, 2.WEHRE이니까 -->                       
		 WHERE
		                BOARD_STATUS = 'Y'
		    AND
		                BOARD_NO = ?
</entry>

<!-- 위의 SELECTCATEGORY와 달리 단순히 카테고리리스트만 조회하는 SQL-->
<entry key="selectCategoryList">
		SELECT
					CTG_NO,
					CTG_NAME
		FROM
					TB_CATEGORY
		WHERE
					CTG_NO BETWEEN 1 AND 10
	
</entry>
<entry key="selectSwiperBestBoardList">

SELECT
    RNUM,
    BOARD_NO,
    BOARD_TITLE,
    BOARD_VIEWS,
    BOARD_CREATE_DATE,
    USER_NICKNAME,
    COMMENT_COUNT,
    FILE_URL

FROM
    (SELECT
        ROWNUM RNUM,
        BOARD_NO,
        BOARD_TITLE,
        BOARD_VIEWS,
        BOARD_CREATE_DATE,
        USER_NICKNAME,
        COMMENT_COUNT,
        FILE_URL
    FROM
        (SELECT 
            BOARD_NO,
            BOARD_TITLE,
            BOARD_VIEWS,
            BOARD_CREATE_DATE,
            USER_NICKNAME,
            COUNT(COMMENT_NO) "COMMENT_COUNT",
            FILE_PATH||'/'||UPLOAD_NAME "FILE_URL"
        FROM
            TB_BOARD
        JOIN TB_FILE ON(BOARD_NO = REF_BNO)
        JOIN TB_USER USING(USER_NO)
        LEFT JOIN TB_COMMENT USING(BOARD_NO)
        GROUP BY 
            BOARD_NO,
            BOARD_TITLE,
            BOARD_VIEWS,
            BOARD_CREATE_DATE,
            USER_NICKNAME,
            FILE_PATH||'/'||UPLOAD_NAME,
            FILE_LEVEL,
            BOARD_STATUS,
            CTG_NO
        HAVING
            BOARD_STATUS = 'Y'
        AND
            FILE_LEVEL = 1
        AND
            11 > CTG_NO
        ORDER BY
            BOARD_CREATE_DATE DESC
        )

    )
WHERE
    12 >= RNUM

</entry>

<entry key="insertBoard">
		INSERT
		INTO	<!-- INSERT할 때 TABLE(특정컬럼)시 나머지컬럼값은 DEFAULT가 들어감 -->
						TB_BOARD
						(
						BOARD_NO, 
						BOARD_TITLE, 
						BOARD_CONTENT, 
						BOARD_CREATE_DATE,
						USER_NO, 
						CTG_NO
						)
		VALUES
						(<!-- PETOPIA"."TB_BOARD"."FILE_IMG" 파일이미지는 notnull이기에 넣는다. -->
						SEQ_BOARD_NO.NEXTVAL,
						?,
						?,
						SYSDATE,
						?,
						?
						)
<!-- insert는 where이 없어요 -->
</entry>

<entry key="insertCategory">

	<!-- 카테고리는 값이 정해져있습니다. -->
	
</entry>

<entry key="insertFileList">
		INSERT
		INTO
						TB_FILE
						(
						FILE_NO,
						REF_BNO, 
						ORIGINAL_NAME, 
						UPLOAD_NAME, 
						FILE_PATH, 
						FILE_LEVEL)
		VALUES      
						(
						SEQ_FILE_NO.NEXTVAL,
						SEQ_BOARD_NO.CURRVAL, <!-- 현재 게시판 넘버 -->
						?,
						?,
						?,
						?
						)

</entry>
<!-- 
최신글 순으로 정리된 게시글 수를 
시작페이지와 끝페이지의 페이징바를 통해 번호(개수)로 나타내고
한편, 조회된 리스트들을 보여주는 SQL
-->
<!-- 게시글 수에 따른 유저등급관리 -->
<entry key="">
		UPDATE 
						TB_USER
		SET
						ROLE_ID = 'R1'
		WHERE 
						(
						SELECT 
									COUNT(*) 
						FROM 
									TB_BOARD 
						WHERE 
									USER_ID = ? 
						)  = ?
					
</entry>
</properties>